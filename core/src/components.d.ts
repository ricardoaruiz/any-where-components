/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonSize, ButtonType, ButtonVariant } from "./components/aw-button/types";
import { Direction, Size } from "./components/icons/types";
import { LabelPosition } from "./components/aw-switch/aw-switch";
export namespace Components {
    interface AwAccordion {
        "exclusive": boolean;
    }
    interface AwAccordionContent {
        "isOpened"?: boolean;
        "name": string;
        "title": string;
    }
    interface AwButton {
        /**
          * Define if button takes all width of container or if container is a flex, the button assume flex=1
         */
        "blocked"?: boolean;
        /**
          * Define if buttons is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Define button size
          * @default medium
         */
        "size"?: ButtonSize;
        /**
          * Button type
          * @values button, submit
          * @default button
         */
        "type"?: ButtonType;
        /**
          * Button variant
          * @values primary, danger, warning, outline
          * @default primary
         */
        "variant"?: ButtonVariant;
    }
    interface AwIconArrow {
        "color"?: string;
        "direction"?: Direction;
        "noTransition"?: boolean;
        "size"?: Size;
    }
    interface AwIconSearch {
        "color"?: string;
        "direction"?: Direction;
        "noTransition"?: boolean;
        "size"?: Size;
    }
    interface AwSwitch {
        "disabled"?: boolean;
        "isOn"?: boolean;
        "label"?: string;
        "labelPosition"?: LabelPosition;
    }
    interface AwvComponentGroup {
        "title": string;
    }
}
declare global {
    interface HTMLAwAccordionElement extends Components.AwAccordion, HTMLStencilElement {
    }
    var HTMLAwAccordionElement: {
        prototype: HTMLAwAccordionElement;
        new (): HTMLAwAccordionElement;
    };
    interface HTMLAwAccordionContentElement extends Components.AwAccordionContent, HTMLStencilElement {
    }
    var HTMLAwAccordionContentElement: {
        prototype: HTMLAwAccordionContentElement;
        new (): HTMLAwAccordionContentElement;
    };
    interface HTMLAwButtonElement extends Components.AwButton, HTMLStencilElement {
    }
    var HTMLAwButtonElement: {
        prototype: HTMLAwButtonElement;
        new (): HTMLAwButtonElement;
    };
    interface HTMLAwIconArrowElement extends Components.AwIconArrow, HTMLStencilElement {
    }
    var HTMLAwIconArrowElement: {
        prototype: HTMLAwIconArrowElement;
        new (): HTMLAwIconArrowElement;
    };
    interface HTMLAwIconSearchElement extends Components.AwIconSearch, HTMLStencilElement {
    }
    var HTMLAwIconSearchElement: {
        prototype: HTMLAwIconSearchElement;
        new (): HTMLAwIconSearchElement;
    };
    interface HTMLAwSwitchElement extends Components.AwSwitch, HTMLStencilElement {
    }
    var HTMLAwSwitchElement: {
        prototype: HTMLAwSwitchElement;
        new (): HTMLAwSwitchElement;
    };
    interface HTMLAwvComponentGroupElement extends Components.AwvComponentGroup, HTMLStencilElement {
    }
    var HTMLAwvComponentGroupElement: {
        prototype: HTMLAwvComponentGroupElement;
        new (): HTMLAwvComponentGroupElement;
    };
    interface HTMLElementTagNameMap {
        "aw-accordion": HTMLAwAccordionElement;
        "aw-accordion-content": HTMLAwAccordionContentElement;
        "aw-button": HTMLAwButtonElement;
        "aw-icon-arrow": HTMLAwIconArrowElement;
        "aw-icon-search": HTMLAwIconSearchElement;
        "aw-switch": HTMLAwSwitchElement;
        "awv-component-group": HTMLAwvComponentGroupElement;
    }
}
declare namespace LocalJSX {
    interface AwAccordion {
        "exclusive"?: boolean;
    }
    interface AwAccordionContent {
        "isOpened"?: boolean;
        "name"?: string;
        "onAwOnAccordionContentToggle"?: (event: CustomEvent<string>) => void;
        "title"?: string;
    }
    interface AwButton {
        /**
          * Define if button takes all width of container or if container is a flex, the button assume flex=1
         */
        "blocked"?: boolean;
        /**
          * Define if buttons is disabled
          * @default false
         */
        "disabled"?: boolean;
        "onAwClicked"?: (event: CustomEvent<void>) => void;
        /**
          * Define button size
          * @default medium
         */
        "size"?: ButtonSize;
        /**
          * Button type
          * @values button, submit
          * @default button
         */
        "type"?: ButtonType;
        /**
          * Button variant
          * @values primary, danger, warning, outline
          * @default primary
         */
        "variant"?: ButtonVariant;
    }
    interface AwIconArrow {
        "color"?: string;
        "direction"?: Direction;
        "noTransition"?: boolean;
        "size"?: Size;
    }
    interface AwIconSearch {
        "color"?: string;
        "direction"?: Direction;
        "noTransition"?: boolean;
        "size"?: Size;
    }
    interface AwSwitch {
        "disabled"?: boolean;
        "isOn"?: boolean;
        "label"?: string;
        "labelPosition"?: LabelPosition;
        "onToggle"?: (event: CustomEvent<boolean>) => void;
    }
    interface AwvComponentGroup {
        "title"?: string;
    }
    interface IntrinsicElements {
        "aw-accordion": AwAccordion;
        "aw-accordion-content": AwAccordionContent;
        "aw-button": AwButton;
        "aw-icon-arrow": AwIconArrow;
        "aw-icon-search": AwIconSearch;
        "aw-switch": AwSwitch;
        "awv-component-group": AwvComponentGroup;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "aw-accordion": LocalJSX.AwAccordion & JSXBase.HTMLAttributes<HTMLAwAccordionElement>;
            "aw-accordion-content": LocalJSX.AwAccordionContent & JSXBase.HTMLAttributes<HTMLAwAccordionContentElement>;
            "aw-button": LocalJSX.AwButton & JSXBase.HTMLAttributes<HTMLAwButtonElement>;
            "aw-icon-arrow": LocalJSX.AwIconArrow & JSXBase.HTMLAttributes<HTMLAwIconArrowElement>;
            "aw-icon-search": LocalJSX.AwIconSearch & JSXBase.HTMLAttributes<HTMLAwIconSearchElement>;
            "aw-switch": LocalJSX.AwSwitch & JSXBase.HTMLAttributes<HTMLAwSwitchElement>;
            "awv-component-group": LocalJSX.AwvComponentGroup & JSXBase.HTMLAttributes<HTMLAwvComponentGroupElement>;
        }
    }
}
